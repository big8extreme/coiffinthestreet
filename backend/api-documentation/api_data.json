[  {    "type": "Get",    "url": "/Config",    "title": "1. Get All configs",    "name": "GetConfigs",    "group": "configs",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Token",            "optional": false,            "field": "bearer.",            "description": ""          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "index",            "optional": false,            "field": "configs",            "description": "<p>/ Get an Array of configs objets</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n\"configs\": [\n  {\n         \"id\": 1,\n         \"cgu\": \"this is a sentence\",\n         \"charte\": \"this is a short text\",\n         \"email\": \"faker.internet.email()\",\n         \"videoGuidelines\": \"this is a short text\",\n          \"videoPath\": \"faker.internet.url()\",\n         \"legalMention\": \"this is a short text\"\n     }\n   ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/configs.js",    "groupTitle": "configs"  },  {    "type": "post",    "url": "/configs",    "title": "3. Create Config",    "name": "PostConfigs",    "group": "configs",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Create",            "optional": false,            "field": "/configs",            "description": "<p>Full services object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 201 Created\n  \"config\": {\n         \"id\": 1,\n        \"cgu\": \"this is a sentence\",\n        \"charte\": \"this is a short text\",\n        \"email\": \"faker.internet.email()\",\n        \"videoGuidelines\": \"this is a short text\",\n         \"videoPath\": \"faker.internet.url()\",\n        \"legalMention\": \"this is a short text\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/configs.js",    "groupTitle": "configs"  },  {    "type": "put",    "url": "/configs/:id",    "title": "2. Update Config by id",    "name": "PutConfig",    "group": "configs",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Update",            "optional": false,            "field": "configs/:id",            "description": "<p>Get updated config Object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 OK\n        \"updatedConfig\" :{\n         \"id\": 1,\n        \"cgu\": \"this is a sentence\",\n        \"charte\": \"this is a short text\",\n        \"email\": \"faker.internet.email()\",\n        \"videoGuidelines\": \"this is a short text\",\n         \"videoPath\": \"faker.internet.url()\",\n        \"legalMention\": \"this is a short text\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/configs.js",    "groupTitle": "configs"  },  {    "type": "Get",    "url": "/Index",    "title": "1. Get All indexes",    "name": "GetIndexes",    "group": "indexes",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "index",            "optional": false,            "field": "indexes",            "description": "<p>/ Get a welcome sentence from Express</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/index.js",    "groupTitle": "indexes"  },  {    "type": "delete",    "url": "/maraudes/:id",    "title": "5. Delete Maraude by id",    "name": "DeleteMaraude",    "group": "maraudes",    "parameter": {      "fields": {        "maraudes": [          {            "group": "maraudes",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Maraudes unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "204",            "optional": false,            "field": "maraudes/:id",            "description": "<p>No content</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No Content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "Get",    "url": "/Maraude",    "title": "1. Get All maraudes",    "name": "GetMaraudes",    "group": "maraudes",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "index",            "optional": false,            "field": "maraudes",            "description": "<p>/ Get an Array of maraudes objets</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 OK\n \"maraudes\": [\n   {\n id: 1\n userId: 2,\n title: 'Maraude no 1',\n startAt: new Date(),\n endAt: new Date(),\n description: faker.lorem.sentence(),\n city: 'Marseille',\n isPublished: true,\n longitude: '5.368414',\n latitude: '43.301999',\n photos: [\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n]\n      }\n    ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "Get",    "url": "/maraudes/:id",    "title": "2. Get Maraude by id",    "name": "GetMaraudes",    "group": "maraudes",    "parameter": {      "fields": {        "maraudes": [          {            "group": "maraudes",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Maraudes unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "show",            "optional": false,            "field": "maraudes/:id",            "description": "<p>Get maraude</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 OK\n \"maraude\": [\n   {\n id: 1\n userId: 2,\n title: 'Maraude no 1',\n startAt: new Date(),\n endAt: new Date(),\n description: faker.lorem.sentence(),\n city: 'Marseille',\n isPublished: true,\n longitude: '5.368414',\n latitude: '43.301999',\n photos: [\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n]\n      }\n    ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "Get",    "url": "/maraudes/:coord",    "title": "2. Get Maraude by coord",    "name": "GetMaraudes",    "parameter": {      "fields": {        "Maraudes": [          {            "group": "Maraudes",            "type": "Number",            "optional": false,            "field": "longitude.",            "description": ""          },          {            "group": "Maraudes",            "type": "Number",            "optional": false,            "field": "latitude.",            "description": ""          }        ]      }    },    "group": "maraudes",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "show",            "optional": false,            "field": "maraudes/:coord",            "description": "<p>Get maraude</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 OK\n \"maraude\": [\n   {\n id: 1\n userId: 2,\n title: 'Maraude no 1',\n startAt: new Date(),\n endAt: new Date(),\n description: faker.lorem.sentence(),\n city: 'Marseille',\n isPublished: true,\n longitude: '5.368414',\n latitude: '43.301999',\n photos: [\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n]\n      }\n    ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "post",    "url": "/maraudes",    "title": "3. Create Maraude",    "name": "PostMaraudes",    "group": "maraudes",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Create",            "optional": false,            "field": "/maraudes",            "description": "<p>Full maraudes object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 201 Created\n    *  \"maraude\": [\n   {\n id: 1\n userId: 2,\n title: 'Maraude no 1',\n startAt: new Date(),\n endAt: new Date(),\n description: faker.lorem.sentence(),\n city: 'Marseille',\n isPublished: true,\n longitude: '5.368414',\n latitude: '43.301999',\n photos: [\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n]\n      }\n    ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "put",    "url": "/maraudes/:id",    "title": "4. Update Maraude by id",    "name": "PutMaraude",    "group": "maraudes",    "parameter": {      "fields": {        "maraudes": [          {            "group": "maraudes",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Maraudes unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Update",            "optional": false,            "field": "maraudes/:id",            "description": "<p>Get updated maraude Object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 OK\n \"maraude\": [\n   {\n id: 1\n userId: 2,\n title: 'Maraude no 1',\n startAt: new Date(),\n endAt: new Date(),\n description: faker.lorem.sentence(),\n city: 'Marseille',\n isPublished: true,\n longitude: '5.368414',\n latitude: '43.301999',\n photos: [\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n   { url: faker.image.imageUrl() },\n]\n      }\n    ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/maraudes.js",    "groupTitle": "maraudes"  },  {    "type": "delete",    "url": "/participants/:id",    "title": "5. Delete Participant by id",    "name": "DeleteParticipant",    "group": "participants",    "parameter": {      "fields": {        "participants": [          {            "group": "participants",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Participants unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "204",            "optional": false,            "field": "participants/:id",            "description": "<p>No content</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No Content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/participants.js",    "groupTitle": "participants"  },  {    "type": "Get",    "url": "/Participant",    "title": "1. Get All participants",    "name": "GetParticipants",    "group": "participants",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "index",            "optional": false,            "field": "participants",            "description": "<p>/ Get an Array of participants objets</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n\"participants\": [\n  {\nid: 1\nisValidate: true,\nemail: \"faker.internet.email()\",\njob: a job selected among 3 choices,\nlastName: \"faker.name.lastName()\",\nfirstName: \"faker.name.firstName()\",\ncity: \"faker.adress.city()\",\n     }\n   ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/participants.js",    "groupTitle": "participants"  },  {    "type": "Get",    "url": "/participants/:id",    "title": "2. Get Participant by id",    "name": "GetParticipants",    "group": "participants",    "parameter": {      "fields": {        "participants": [          {            "group": "participants",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Participant unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "show",            "optional": false,            "field": "participants/:id",            "description": "<p>Get participant</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "\"participant\": [\n  {\nid: 1\nisValidate: true,\nemail: \"faker.internet.email()\",\njob: a job selected among 3 choices,\nlastName: \"faker.name.lastName()\",\nfirstName: \"faker.name.firstName()\",\ncity: \"faker.adress.city()\",\n     }\n   ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/participants.js",    "groupTitle": "participants"  },  {    "type": "post",    "url": "/participants",    "title": "3. Create Participant",    "name": "PostParticipant",    "group": "participants",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Create",            "optional": false,            "field": "/participants",            "description": "<p>Full participants object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "   HTTP/1.1 201 Created\n\"participant\": [\n  {\nid: 1\nisValidate: true,\nemail: \"faker.internet.email()\",\njob: a job selected among 3 choices,\nlastName: \"faker.name.lastName()\",\nfirstName: \"faker.name.firstName()\",\ncity: \"faker.adress.city()\",\n     }\n   ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/participants.js",    "groupTitle": "participants"  },  {    "type": "put",    "url": "/participants/:id",    "title": "4. Update Participant by id",    "name": "PutParticipant",    "group": "participants",    "parameter": {      "fields": {        "participants": [          {            "group": "participants",            "type": "Number",            "optional": false,            "field": "id",            "description": "<p>Participants unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Update",            "optional": false,            "field": "participants/:id",            "description": "<p>Get updated participant Object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n\"participant\": [\n  {\nid: 1\nisValidate: true,\nemail: \"faker.internet.email()\",\njob: a job selected among 3 choices,\nlastName: \"faker.name.lastName()\",\nfirstName: \"faker.name.firstName()\",\ncity: \"faker.adress.city()\",\n     }\n   ]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/participants.js",    "groupTitle": "participants"  },  {    "type": "delete",    "url": "/pictures/:id",    "title": "Delete Pictures by id",    "name": "DeletePictures",    "group": "pictures",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "idPicture",            "description": ""          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "204",            "optional": false,            "field": "pictures/:id",            "description": "<p>No content</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No Content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "400BadRequest",            "description": "<p>Bad Request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "401Unauthorized",            "description": "<p>Request denied; check the Authorization key of your request's header.</p>"          }        ]      },      "examples": [        {          "title": "Error400:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"Bad Request\"\n}",          "type": "json"        },        {          "title": "Error401:",          "content": "HTTP/1.1 401 Unauthorized\nUnauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "routes/pictures.js",    "groupTitle": "pictures"  }]
